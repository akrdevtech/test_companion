import express, { NextFunction, Request, Response } from 'express';
import { IAppFeatures } from '../../interfaces/appFeatures';
import { IAppConfig } from '../../config';
import { HttpStatusCode } from '../../enums/httpStatusCode';
import { BaseController } from '../BaseController';
import { IStudentService, StudentService } from './StudentServices';
import { CourseService, ICourseService } from '../course/CourseServices';
import errors from '../../errors';
import { InternalErrorMessages } from '../../enums/errors';
import { CourseEnrollmentService, ICourseEnrollmentService } from '../enrollments/EnrollmentServices';
import { getStudentAdmissionNumberSchema } from '../../models/validators/students';
const { InternalError } = errors;


export class StudentsController extends BaseController {
  public basePath: string;
  public studentServices: IStudentService;
  public courseServices: ICourseService;
  public courseEnrollmentServices: ICourseEnrollmentService;

  constructor(appConfig: IAppConfig, appFeatures?: IAppFeatures) {
    super(appConfig, { basePath: '/students', moduleName: 'Students Controller' }, appFeatures);
    this.router = express.Router();
    this.studentServices = new StudentService(appConfig, appFeatures)
    this.courseServices = new CourseService(appConfig, appFeatures)
    this.courseEnrollmentServices = new CourseEnrollmentService(appConfig, appFeatures)
    this.intializeRoutes();
  }

  public getBasePath(): string {
    return this.basePath;
  }

  public intializeRoutes(): void {
    this.router.get(this.basePath, [
      this.transactionLogger.logTransaction(`Get All Students`),
      this.getAllStudents
    ]);
    this.router.get(`${this.basePath}/admno`, [
      this.transactionLogger.logTransaction(`Generate new admission number`),
      this.validateAll(getStudentAdmissionNumberSchema),
      this.getAutogeneratedAdmissionNumber
    ]);

  }

  private getAutogeneratedAdmissionNumber = async (request: Request, response: Response, next: NextFunction) => {
    const { query: { courseId, dateOfAdmission } } = request;
    const courseInfo = await this.courseServices.getCourseByCourseId(courseId as string);
    if (!courseInfo) {
      next(new InternalError(InternalErrorMessages.FailedToFindCourse, HttpStatusCode.BAD_REQUEST));
    }
    const thisDate = new Date(dateOfAdmission as string);
    const enrollmentsOfCourse = await this.courseEnrollmentServices.getEnrollmentsForCourse(courseId as string, thisDate, thisDate);
    const courseCode = this.courseEnrollmentServices.getWithPaddingZeros(Number(courseInfo.code));
    const enrollCount = enrollmentsOfCourse ?
      this.courseEnrollmentServices.getWithPaddingZeros(Number(enrollmentsOfCourse.enrolled) + 1) :
      this.courseEnrollmentServices.getWithPaddingZeros(1);
    const thisYear = thisDate.getFullYear();
    const thisMonth = thisDate.getMonth() + 1;
    const centerCode = 'RPTC';
    const admissionNumber = `${centerCode}-${thisYear}${thisMonth > 9 ? thisMonth : `0${thisMonth}`}${courseCode}${enrollCount}`
    response.status(HttpStatusCode.OK).send({ status: 'ok', txId: request.txId, admissionNumber });
  }

  private getAllStudents = async (request: Request, response: Response) => {
    const studentsList = await this.studentServices.getAllStudents(1, 10);
    response.status(HttpStatusCode.OK).send({ status: 'ok', txId: request.txId, studentsList });
  };
}
