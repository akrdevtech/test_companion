import express, { NextFunction, Request, Response } from 'express';
import { IAppFeatures } from '../../interfaces/AppFeatures';
import { IAppConfig } from '../../config';
import { HttpStatusCode } from '../../enums/httpStatusCode';
import { BaseController } from '../BaseController';
import { IStudentService, StudentService } from './StudentServices';
import { CourseService, ICourseService } from '../course/CourseServices';
import errors from '../../errors';
import { InternalErrorMessages } from '../../enums/errors';
import { CourseEnrollmentService, ICourseEnrollmentService } from '../enrollments/EnrollmentServices';
import { activateStudentValidationSchema, createNewStudentValidationSchema, deActivateStudentValidationSchema, deleteStudentValidationSchema, getStudentAdmissionNumberSchema, graduateStudentValidationSchema, pursueStudentValidationSchema } from '../../models/validators/students';
import { ICreateStudentRequestSchema } from '../../models/rest/student/createStudent';
import { StudentDTO } from '../../models/domain/StudentDTO';
import { IGetPaginatedStudentListFiltersSchema, IGetPaginatedStudentListRequestSchema } from '../../models/rest/student/getPaginatedStudentList';
import { EStudentAdmissionFilter, EStudentGraduationFilter, EStudentPresenceFilter } from '../../enums/student';
const { InternalError } = errors;
export class StudentsController extends BaseController {
  public basePath: string;
  public studentServices: IStudentService;
  public courseServices: ICourseService;
  public courseEnrollmentServices: ICourseEnrollmentService;
  public studentDTO: StudentDTO;
  constructor(appConfig: IAppConfig, appFeatures?: IAppFeatures) {
    super(appConfig, { basePath: '/students', moduleName: 'Students Controller' }, appFeatures);
    this.router = express.Router();
    this.studentServices = new StudentService(appConfig, appFeatures)
    this.courseServices = new CourseService(appConfig, appFeatures)
    this.courseEnrollmentServices = new CourseEnrollmentService(appConfig, appFeatures)
    this.studentDTO = new StudentDTO();
    this.intializeRoutes();
  }
  public getBasePath(): string {
    return this.basePath;
  }
  public intializeRoutes(): void {
    this.router.get(this.basePath, [
      this.transactionLogger.logTransaction(`Getting Students`),
      this.getPaginatedStudentList
    ]);
    this.router.post(this.basePath, [
      this.transactionLogger.logTransaction(`Creating new Student`),
      this.validateAll(createNewStudentValidationSchema),
      this.asyncHandler(this.createNewStudent)
    ]);
    this.router.delete(`${this.basePath}/:studentId`, [
      this.transactionLogger.logTransaction(`Deleting Student`),
      this.validateAll(deleteStudentValidationSchema),
      this.asyncHandler(this.deleteStudent)
    ]);
    this.router.patch(`${this.basePath}/:studentId/activate`, [
      this.transactionLogger.logTransaction(`Activating Student`),
      this.validateAll(activateStudentValidationSchema),
      this.asyncHandler(this.activateStudent)
    ]);
    this.router.patch(`${this.basePath}/:studentId/deactivate`, [
      this.transactionLogger.logTransaction(`Deactivating Student`),
      this.validateAll(deActivateStudentValidationSchema),
      this.asyncHandler(this.deactivateStudent)
    ]);
    this.router.patch(`${this.basePath}/:studentId/graduate`, [
      this.transactionLogger.logTransaction(`Course Graduatd by Student`),
      this.validateAll(graduateStudentValidationSchema),
      this.asyncHandler(this.studentGraduateCourse)
    ]);
    this.router.patch(`${this.basePath}/:studentId/pursue`, [
      this.transactionLogger.logTransaction(`Course Pursued by Student`),
      this.validateAll(pursueStudentValidationSchema),
      this.asyncHandler(this.studentPursueCourse)
    ]);
    this.router.get(`${this.basePath}/admno`, [
      this.transactionLogger.logTransaction(`Generating new admission number`),
      this.validateAll(getStudentAdmissionNumberSchema),
      this.getAutogeneratedAdmissionNumber
    ]);
  }
  private activateStudent = async (request: Request, response: Response, next: NextFunction) => {
    const { studentId } = request.params;
    const existing = await this.studentServices.getStudentById(studentId);
    const isSuccess = await this.studentServices.activateStudent(studentId, existing);
    const studentData = await this.studentServices.getStudentById(studentId);
    this.sendResponse(response, HttpStatusCode.OK, { status: HttpStatusCode.OK, txId: request.txId, studentData, isSuccess });
  }
  private deactivateStudent = async (request: Request, response: Response, next: NextFunction) => {
    const { studentId } = request.params;
    const existing = await this.studentServices.getStudentById(studentId);
    const isSuccess = await this.studentServices.activateStudent(studentId, existing);
    const studentData = await this.studentServices.getStudentById(studentId);
    this.sendResponse(response, HttpStatusCode.OK, { status: HttpStatusCode.OK, txId: request.txId, studentData, isSuccess });
  }
  private studentGraduateCourse = async (request: Request, response: Response, next: NextFunction) => {
    const { studentId } = request.params;
    const existing = await this.studentServices.getStudentById(studentId);
    const isSuccess = await this.studentServices.studentGraduateCourse(studentId, existing);
    const studentData = await this.studentServices.getStudentById(studentId);
    this.sendResponse(response, HttpStatusCode.OK, { status: HttpStatusCode.OK, txId: request.txId, studentData, isSuccess });
  }
  private studentPursueCourse = async (request: Request, response: Response, next: NextFunction) => {
    const { studentId } = request.params;
    const existing = await this.studentServices.getStudentById(studentId);
    const isSuccess = await this.studentServices.studentPursueCourse(studentId, existing);
    const studentData = await this.studentServices.getStudentById(studentId);
    this.sendResponse(response, HttpStatusCode.OK, { status: HttpStatusCode.OK, txId: request.txId, studentData, isSuccess });
  }
  private deleteStudent = async (request: Request, response: Response, next: NextFunction) => {
    const { studentId } = request.params;
    const existingStudent = await this.studentServices.getStudentById(studentId);
    await this.courseServices.expellStudentFromCourse(
      existingStudent.courseInfo.course,
      existingStudent.settings.hasGraduated);
    await this.studentServices.deleteStudent(studentId);
    // await attendanceService.deleteAttendanceByStudentId(studentId);
    this.sendResponse(response, HttpStatusCode.OK, { status: HttpStatusCode.OK, txId: request.txId });
  }
  private createNewStudent = async (request: Request, response: Response, next: NextFunction) => {
    const data = request.body as ICreateStudentRequestSchema;
    const { courseInfo: { course, dateOfAdmission } } = data;
    await this.courseEnrollmentServices.upsertEnrollment(course, dateOfAdmission);
    await this.courseServices.enrollStudentToCourse(course);
    const studentData = await this.studentServices.createStudent(this.studentDTO.fromCreateRequestToDb(data));
    this.sendResponse(response, HttpStatusCode.OK, { status: HttpStatusCode.OK, txId: request.txId, student: studentData });
  }
  private getAutogeneratedAdmissionNumber = async (request: Request, response: Response, next: NextFunction) => {
    const { query: { courseId, dateOfAdmission } } = request;
    const courseInfo = await this.courseServices.getCourseByCourseId(courseId as string);
    if (!courseInfo) {
      next(new InternalError(InternalErrorMessages.FailedToFindCourse, HttpStatusCode.BAD_REQUEST));
    }
    const thisDate = new Date(dateOfAdmission as string);
    const enrollmentsOfCourse = await this.courseEnrollmentServices.getEnrollmentsForCourse(courseId as string, thisDate, thisDate);
    const courseCode = this.courseEnrollmentServices.getWithPaddingZeros(Number(courseInfo.code));
    const enrollCount = enrollmentsOfCourse ?
      this.courseEnrollmentServices.getWithPaddingZeros(Number(enrollmentsOfCourse.enrolled) + 1) :
      this.courseEnrollmentServices.getWithPaddingZeros(1);
    const thisYear = thisDate.getFullYear();
    const thisMonth = thisDate.getMonth() + 1;
    const centerCode = 'RPTC';
    const admissionNumber = `${centerCode}-${thisYear}${thisMonth > 9 ? thisMonth : `0${thisMonth}`}${courseCode}${enrollCount}`
    response.status(HttpStatusCode.OK).send({ status: HttpStatusCode.OK, txId: request.txId, admissionNumber });
  }
  private getPaginatedStudentList = async (request: Request, response: Response) => {
    const { page, limit, search, admission, course, graduation, presence }: IGetPaginatedStudentListRequestSchema = {
      page: Number(request.query.page),
      limit: Number(request.query.limit),
      search: request.query.search as string,
      course: request.query.course as string,
      admission: request.query.admission as EStudentAdmissionFilter,
      graduation: request.query.graduation as EStudentGraduationFilter,
      presence: request.query.presence as EStudentPresenceFilter,
    };
    const filters: IGetPaginatedStudentListFiltersSchema = { search, admission, course, graduation, presence };
    const studentsList = await this.studentServices.getPaginatedStudentList(page, limit, filters);
    response.status(HttpStatusCode.OK).send({ status: HttpStatusCode.OK, txId: request.txId, studentsList });
  };
}
